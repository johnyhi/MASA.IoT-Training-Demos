@page "/fetchdata"

@using MASA.IoT.Common.Helper
@using MQTTnet.Client
@using Texnomic.Blazor.JsonViewer
@implements IDisposable

<PageTitle>Weather forecast</PageTitle>

<h1>设备列表</h1>

<MDataTable Headers="_headers" Items="_desserts" ItemsPerPage="5" Class="elevation-1">
    <ItemColContent>
        @if (context.Header.Value == "actions")
        {
            <MIcon Small Class="mr-2" OnClick="()=>EditItem(context.Item)">mdi-pencil</MIcon>
        }
        else
        {
            @context.Value
        }
    </ItemColContent>
</MDataTable>
<PDrawer Width="500" Value="_showDrawer" ValueChanged="DrwerChangedAsync">
    <ActivatorContent>

    </ActivatorContent>
    <ChildContent>
        <JsonViewer @ref="JsonViewerInstance"></JsonViewer>
    </ChildContent>
</PDrawer>

@code {
    private string mqttUrl { get; set; }
    private JsonViewer JsonViewerInstance { get; set; }
    private MqttHelper mqttHelper { get; set; }
    public class Dessert
    {
        public string Name { get; set; }
    }
    private bool _showDrawer { get; set; }
    private int _editedIndex;

    protected override async Task OnInitializedAsync()
    {
        mqttUrl = AppHelper.ReadAppSettings("MqttUrl");
    }
    private List<DataTableHeader<Dessert>> _headers = new List<DataTableHeader<Dessert>>
                        {
           new ()
           {
            Text= "设备名称",
            Align= DataTableHeaderAlign.Start,
            Sortable= false,
            Value= nameof(Dessert.Name)
          },
                    new (){ Text= "Actions", Value= "actions",Sortable=false,Width="100px",Align=DataTableHeaderAlign.Center, }

        };

    private async Task DrwerChangedAsync()
    {
        _showDrawer = !_showDrawer;
        if (!_showDrawer)
        {
            await mqttHelper.Disconnect_Client();
        }
    }

    private List<Dessert> _desserts = new List<Dessert>
                        {
           new Dessert
           {
              Name= "Device01",
           },
                new Dessert
                {
                    Name= "Device02",
                },
                new Dessert
                {
                    Name= "Device03",
                },

        };

    private async Task EditItem(Dessert item)
    {
        _showDrawer = true;
        _editedIndex = _desserts.IndexOf(item);

        mqttHelper = new MqttHelper(mqttUrl, Guid.NewGuid().ToString(), "", TokenHelper.CreateJwtToken(new Dictionary<string, object>(), "731543"));
        await mqttHelper.ConnectClient(CallbackAsync, _desserts[_editedIndex].Name); //发布主题消息

    }

    private async Task CallbackAsync(MqttApplicationMessageReceivedEventArgs e)
    {
        var deviceDataPointStr = System.Text.Encoding.Default.GetString(e.ApplicationMessage.Payload);
        await JsonViewerInstance.Render(deviceDataPointStr);
        await InvokeAsync(StateHasChanged);
    }


    public void Dispose()
    {
        if (mqttHelper != null)
        {
            mqttHelper.Disconnect_Client().GetAwaiter().GetResult();
        }
    }

}
