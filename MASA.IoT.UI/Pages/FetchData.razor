@page "/fetchdata"

@using MASA.IoT.Common.Helper
@using MASA.IoT.Core.Contract.Device
@using MASA.IoT.UI.Caller
@using MQTTnet.Client
@using Texnomic.Blazor.JsonViewer
@using MASA.IoT.UI.Components
@implements IDisposable

<PageTitle>设备列表</PageTitle>

<h1>设备列表</h1>
<MDataTable Headers="_headers" Items="deviceList"  Class="elevation-1" Page="_options.PageIndex"  ItemsPerPage="_options.PageSize"
            ServerItemsLength="_totalCount">
    <ItemColContent>
        @if (context.Header.Value == "actions")
        {
            <MIcon Small Class="mr-2" OnClick="()=>EditItem(context.Item)">mdi-pencil</MIcon>
        }
        else if (context.Header.Value == nameof(DeviceListViewModel.OnLineStates))
        {
            <EnumChip Value="context.Item.OnLineStates"></EnumChip>
        }
        else
        {
            @context.Value
        }
    </ItemColContent>
</MDataTable>
<PDrawer Width="500" Value="ShowDrawer" ValueChanged="DrwerChangedAsync">
    <ActivatorContent>

    </ActivatorContent>
    <ChildContent>
        <JsonViewer @ref="JsonViewerInstance"></JsonViewer>
    </ChildContent>
</PDrawer>

@code {

    private string mqttUrl = AppHelper.ReadAppSettings("MqttUrl");
    private string jwtSecret = AppHelper.ReadAppSettings("JwtSecret");
    private bool _loading = false;
    private int _totalCount = 0;
    private JsonViewer JsonViewerInstance { get; set; }
    private MqttHelper mqttHelper { get; set; }
    private List<DeviceListViewModel> deviceList { get; set; } = new ();
    private bool ShowDrawer { get; set; }
    private int _editedIndex;
    [Inject]
    private DeviceCaller _deviceCaller { get; set; }

    private readonly DeviceListOption _options = new ()
    {
        PageIndex = 1,
        PageSize = 10,
    };



    private async Task GetData()
    {
        var sss= await _deviceCaller.DeviceListAsync(new DeviceListOption { PageIndex = 1, PageSize = 10, ProductId = new Guid("C85EF7E5-2E43-4BD2-A939-07FE5EA3F459") });
        deviceList = sss.Result.ToList();
    }
    private List<DataTableHeader<DeviceListViewModel>> _headers = new()
                        {
           new ()
           {
            Text= "设备名称",
            Align= DataTableHeaderAlign.Start,
            Sortable= false,
            Value= nameof(DeviceListViewModel.DeviceName)
          },
                            new ()
                            {
                                Text= "在线状态",
                                Align= DataTableHeaderAlign.Start,
                                Sortable= false,
                                Value= nameof(DeviceListViewModel.OnLineStates)
                            },
           new (){ Text= "Actions", Value= "actions",Sortable=false,Width="100px",Align=DataTableHeaderAlign.Center, }

        };

    private async Task DrwerChangedAsync()
    {
        ShowDrawer = !ShowDrawer;
        if (!ShowDrawer)
        {
            await mqttHelper.Disconnect_Client();
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var paginatedList= await _deviceCaller.DeviceListAsync(new DeviceListOption { PageIndex = 1, PageSize = 10, ProductId = new Guid("C85EF7E5-2E43-4BD2-A939-07FE5EA3F459") });
            deviceList = paginatedList.Result.ToList();
            _totalCount = (int)paginatedList.Total;
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }


    private async Task EditItem(DeviceListViewModel item)
    {
        //ShowDrawer = true;
        //_editedIndex = _desserts.IndexOf(item);

        //mqttHelper = new MqttHelper(mqttUrl, Guid.NewGuid().ToString(), "", TokenHelper.CreateJwtToken(new Dictionary<string, object>(), jwtSecret));
        //await mqttHelper.ConnectClient(CallbackAsync, _desserts[_editedIndex].Name); //发布主题消息

    }

    private async Task CallbackAsync(MqttApplicationMessageReceivedEventArgs e)
    {
        var deviceDataPointStr = System.Text.Encoding.Default.GetString(e.ApplicationMessage.Payload);
        await JsonViewerInstance.Render(deviceDataPointStr);
        await InvokeAsync(StateHasChanged);
    }


    public void Dispose()
    {
        if (mqttHelper != null)
        {
            mqttHelper.Disconnect_Client().GetAwaiter().GetResult();
        }
    }

}
